#!/bin/sh

## HELPER

# params: index lineNumber message
warn() {
    echo "$1:$2:" | perl -p -e "s/$/ warning: Localization: $3/"
}

# params: -
enumFile() {
    if [ -z "$SCRIPT_INPUT_FILE_0" ]
    then
        enumFile=`find "$SRCROOT" -name "Strings.swift"`
    else
        enumFile="$SCRIPT_INPUT_FILE_0"
    fi
}

# params: -
enumKeys() {
    enumKeys=`cat "$enumFile" | egrep -o "case\s\w*$" | sed "s/case //g"`
}

# params: -
stringsFiles() {
    IFS=$'\t\n'
    stringsFiles=("`find "$SRCROOT" -name "*.strings" -type f`")
    unset $IFS
}

# params: stringsFile
stringsKeys() {
    stringsKeys=`cat "$1" | egrep -o "^\"\w+\"" | sed "s/\"//g"`
}

# params: pattern file
lineNumber() {
    lineNumber=(`egrep --line-number -o "$1" "$2" | cut -f1 -d:`)
}

# params: stringsFile
sortStringsKeys() {
    sort -o "$1" "$1"
}

## UNDEFINED STRINGS KEYS

# params: stringsFile
findUndefinedStringsKeys() {
    enumFile
    stringsKeys "$1"

    for key in $stringsKeys
    do
        if ! egrep -q "case $key" "$enumFile"
        then
            lineNumber "^\"$key\"" "$1"
            warn $1 $lineNumber "Key doesn't exist: \"$key\""
        fi
    done
}

## DUPLICATE STRINGS KEYS

# params: stringsFile
findDuplicateStringsKeys() {
    stringsKeys "$1"

    duplicateKeys=`printf '%s\n' ${stringsKeys[@]} | awk '!($0 in seen){seen[$0];next} 1'`
    for key in $duplicateKeys
    do
        lineNumber "^\"$key\"" "$1"
        warn "$1" $lineNumber "Key is duplicated: \"$key\""
    done
}

## UNDEFINED ENUM KEYS

# params: stringsFile
findUndefinedEnumKeys() {
    if echo "$1" | egrep -q ".*Default.strings$"
    then
        enumFile
        enumKeys

        for key in $enumKeys
        do
            if egrep -q "^\"$key\" = nil;$" "$1"
            then
                lineNumber "^\"$key\"" "$1"
                warn "$1" $lineNumber "Key needs to be defined: \"$key\""
            fi
        done
    fi
}

# params: stringsFile
defineUndefinedEnumKeys() {
    enumFile
    enumKeys

    for key in $enumKeys
    do
        if ! egrep -q "^\"$key\"" "$1"
        then
            echo "\"$key\" = nil;" >> "$1"
        fi
    done
}

## EXECUTE

stringsFiles
for stringsFile in $stringsFiles
do
    echo "> Find undefined keys in: \"$stringsFile\""

    defineUndefinedEnumKeys "$stringsFile"
    sortStringsKeys "$stringsFile"
    findUndefinedEnumKeys "$stringsFile"
    findUndefinedStringsKeys "$stringsFile"
    findDuplicateStringsKeys "$stringsFile"
done

